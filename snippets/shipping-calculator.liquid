<div class="container" data-customer-addresses>    
    <div class="add-new-address">
      <div class="action text-center">
        <a class="btn btn-secondary my-3" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">Add a new address</a>
      </div>
      <div class="collapse my-5" id="collapseExample">
        <div class="address-add">
          <div class="row justify-content-center">
            <div class="col-lg-6 col-md-6">
              <div id="AddAddress">
                <form action="#">
                  <div class="form-group my-3">
                    <div class="select">
                      <select
                        class="form-control"
                        id="AddressCountryNew"
                        name="address[country]"
                        data-default="{{ form.country }}"
                        autocomplete="country"
                      >
                        {{ all_country_option_tags }}
                      </select>
                    </div>
                  </div>
                  <div id="AddressProvinceContainerNew" style="display: none">
                    <div class="select">
                      <select
                        class="form-control"
                        id="AddressProvinceNew"
                        name="address[province]"
                        data-default="{{ form.province }}"
                        autocomplete="address-level1"
                      ></select>
                    </div>
                  </div>
                  
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
<script>
  window.addEventListener('load', () => {
    typeof CustomerAddresses !== 'undefined' && new CustomerAddresses();
  });
  const selectors = {
  customerAddresses: '[data-customer-addresses]',
  addressCountrySelect: '[data-address-country-select]',
  addressContainer: '[data-address]',
};

const attributes = {
  expanded: 'aria-expanded',
  confirmMessage: 'data-confirm-message',
};

class CustomerAddresses {
  constructor() {
    this.elements = this._getElements();
    if (Object.keys(this.elements).length === 0) return;
    this._setupCountries();
  }

  _getElements() {
    const container = document.querySelector(selectors.customerAddresses);
    return container
      ? {
          container,
          addressContainer: container.querySelector(selectors.addressContainer),
          countrySelects: container.querySelectorAll(selectors.addressCountrySelect),
        }
      : {};
  }

  _setupCountries() {
    if (Shopify && Shopify.CountryProvinceSelector) {
      // eslint-disable-next-line no-new
      new Shopify.CountryProvinceSelector('AddressCountryNew', 'AddressProvinceNew', {
        hideElement: 'AddressProvinceContainerNew',
      });
      this.elements.countrySelects.forEach((select) => {
        const formId = select.dataset.formId;
        // eslint-disable-next-line no-new
        new Shopify.CountryProvinceSelector(`AddressCountry_${formId}`, `AddressProvince_${formId}`, {
          hideElement: `AddressProvinceContainer_${formId}`,
        });
      });
    }
  }
}

</script>
