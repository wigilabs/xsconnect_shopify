<script>
  const selectors = {
    customerAddresses: '[data-customer-addresses]',
    addressCountrySelect: '[data-address-country-select]',
    addressContainer: '[data-address]',
    toggleAddressButton: 'button[aria-expanded]',
    cancelAddressButton: 'button[type="reset"]',
    deleteAddressButton: 'button[data-confirm-message]',
  };
  const attributes = {
    expanded: 'aria-expanded',
    confirmMessage: 'data-confirm-message',
  };
  class CustomerAddresses {
    constructor() {
      this.elements = this._getElements();
      if (Object.keys(this.elements).length === 0) return;
      this._setupCountries();
      this._setupEventListeners();
    }
    _getElements() {
      const container = document.querySelector(selectors.customerAddresses);
      return container
        ? {
            container,
            addressContainer: container.querySelector(selectors.addressContainer),
            toggleButtons: document.querySelectorAll(selectors.toggleAddressButton),
            cancelButtons: container.querySelectorAll(selectors.cancelAddressButton),
            deleteButtons: container.querySelectorAll(selectors.deleteAddressButton),
            countrySelects: container.querySelectorAll(selectors.addressCountrySelect),
          }
        : {};
    }
    _setupCountries() {
      if (Shopify && Shopify.CountryProvinceSelector) {
        // eslint-disable-next-line no-new
        new Shopify.CountryProvinceSelector('AddressCountryNew', 'AddressProvinceNew', {
          hideElement: 'AddressProvinceContainerNew',
        });
        this.elements.countrySelects.forEach((select) => {
          const formId = select.dataset.formId;
          // eslint-disable-next-line no-new
          new Shopify.CountryProvinceSelector(`AddressCountry_${formId}`, `AddressProvince_${formId}`, {
            hideElement: `AddressProvinceContainer_${formId}`,
          });
        });
      }
    }
    _setupEventListeners() {
      this.elements.toggleButtons.forEach((element) => {
        element.addEventListener('click', this._handleAddEditButtonClick);
      });
      this.elements.cancelButtons.forEach((element) => {
        element.addEventListener('click', this._handleCancelButtonClick);
      });
      this.elements.deleteButtons.forEach((element) => {
        element.addEventListener('click', this._handleDeleteButtonClick);
      });
    }
    _toggleExpanded(target) {
      target.setAttribute(attributes.expanded, (target.getAttribute(attributes.expanded) === 'false').toString());
    }
    _handleAddEditButtonClick = ({ currentTarget }) => {
      this._toggleExpanded(currentTarget);
    };
    _handleCancelButtonClick = ({ currentTarget }) => {
      this._toggleExpanded(currentTarget.closest(selectors.addressContainer).querySelector(`[${attributes.expanded}]`));
    };
    _handleDeleteButtonClick = ({ currentTarget }) => {
      // eslint-disable-next-line no-alert
      if (confirm(currentTarget.getAttribute(attributes.confirmMessage))) {
        Shopify.postLink(currentTarget.dataset.target, {
          parameters: { _method: 'delete' },
        });
      }
    };
  }
</script>
{% section 'breadcrumb' %}
{%- paginate customer.addresses by 5 -%}
  <div class="container">
    <div class="customer addresses" data-customer-addresses>
      <h2 class="title-body">{{ 'customer.addresses.title' | t }}</h2>
      <svg style="display: none">
        <symbol id="icon-caret" viewBox="0 0 10 6">
            <path fill-rule="evenodd" clip-rule="evenodd"
                  d="M9.354.646a.5.5 0 00-.708 0L5 4.293 1.354.646a.5.5 0 00-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 000-.708z"
                  fill="currentColor">
        </symbol>
      </svg>
      {%- comment -%}
        <a href="{{ routes.account_url }}">
            {{ 'customer.account.return' | t }}
        </a>
      {%- endcomment -%}

      <div class="customer__wrap ca-default">
        <div class="customer__left ca-default__left">
          <ul class="account__ul ca-default__ul">
            <li class="account__li ca-default__li">
              <a href="{{ routes.account_url }}">Dashboard</a>
            </li>
            <li class="account__li ca-default__li">
              <a href="{{ routes.account_addresses_url }}" class="active">Addresses</a>
            </li>
            {%- comment -%}
              <li class="account__li ca-default__li">
                <a href="/pages/wishlist">Wishlist</a>
              </li>
              <li class="account__li ca-default__li">
                <a href="/pages/compare">Compare</a>
              </li>
            {%- endcomment -%}
            <li class="account__li ca-default__li">
              <a href="/cart">Cart</a>
            </li>
            <li class="account__li ca-default__li">
              <a href="{{ routes.account_logout_url }}">Log Out</a>
            </li>
          </ul>
        </div>
        <div class="customer__right ca-default__right">
          <h2 class="product-count__text text-body">{{ 'customer.addresses.subtile' | t }}</h2>
          <div data-address class="mb-[80px]">
            <button
              class="customer__btn tp-btn tp-btn__secondary"
              type="button"
              aria-expanded="false"
              aria-controls="AddAddress"
            >
              {{ 'customer.addresses.add_new' | t }}
            </button>
            <div class="customer__form" id="AddAddress">
              <h2 id="AddressNewHeading mt-7.5">{{ 'customer.addresses.add_new' | t }}</h2>
              {%- form 'customer_address', customer.new_address, aria-labelledBy: 'AddressNewHeading' -%}
                <div class="field">
                  <label for="AddressCityNew">{{ 'customer.addresses.city' | t }}</label>
                  <input
                    type="text"
                    id="AddressCityNew"
                    name="address[city]"
                    value="{{ form.city }}"
                    autocomplete="address-level2"
                    placeholder="{{ 'customer.addresses.city' | t }}"
                  >
                </div>
                <div class="field">
                  <label for="AddressCountryNew">{{ 'customer.addresses.country' | t }}</label>
                  <div class="select">
                    <select
                      id="AddressCountryNew"
                      name="address[country]"
                      data-default="{{ form.country }}"
                      autocomplete="country"
                    >
                      {{ all_country_option_tags }}
                    </select>
                  </div>
                </div>
                <div class="field" id="AddressProvinceContainerNew" style="display: none">
                  <label for="AddressProvinceNew">{{ 'customer.addresses.province' | t }}</label>
                  <div class="select">
                    <select
                      id="AddressProvinceNew"
                      name="address[province]"
                      data-default="{{ form.province }}"
                      autocomplete="address-level1"
                    ></select>
                  </div>
                </div>
                <div class="field">
                  <label for="AddressZipNew">{{ 'customer.addresses.zip' | t }}</label>
                  <input
                    type="text"
                    id="AddressZipNew"
                    name="address[zip]"
                    value="{{ form.zip }}"
                    autocapitalize="characters"
                    autocomplete="postal-code"
                    placeholder="{{ 'customer.addresses.zip' | t }}"
                  >
                </div>
                <div class="field">
                  <label for="AddressPhoneNew">{{ 'customer.addresses.phone' | t }}</label>
                  <input
                    type="tel"
                    id="AddressPhoneNew"
                    name="address[phone]"
                    value="{{ form.phone }}"
                    autocomplete="tel"
                    placeholder="{{ 'customer.addresses.phone' | t }}"
                  >
                </div>
              {%- endform -%}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
{%- endpaginate -%}

<script>
  window.onload = () => {
    typeof CustomerAddresses !== 'undefined' && new CustomerAddresses();
  };
</script>
